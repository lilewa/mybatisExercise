<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lile.mybatisExer.mapper.UserMapper">

    <!--需要注意的是<mapper>根标签的 namespace属性。当Mapper接口和XML文件关联的时候,
    命名空间 namespace的值就需要配置成接口的全限定名称,例如 UserMapper接口对应的com.lile.mybatisExer.mapper.UserMapper
    , MyBatis内部就是通过这个值将接口和XML关联起来的-->

    <!--resultMap ：用于设置返回值的类型和映射关系。
    type ：必填，用于配置查询列所映射到的Java 对象类型。
    extends :选填，可以配置当前的resultMap 继承自其他的re sultMap ，属性值为继承resultMap 的id 。
    autoMapping ：选填，可选值为true 或false ，用于配置是否启用非映射字段（没有在resultMap 中配置的字段〉的自动映射功能， 该配置可以覆盖全局的
                    autoMappingBehavior 配置。

     resultMap 包含的所有标签如下。
        id ： 一个id 结果，标记结果作为id （唯一值），可以帮助提高整体性能。id 代表的是主键（或唯一值）的字段（可以有多个）
        result ： 注入到Java 对象属性的普通结果。
        association ： 一个复杂的类型关联，许多结果将包成这种类型。
        collection ： 复杂类型的集合。
        discriminator ：根据结果值来决定使用哪个结果映射。
        case ： 基于某些值的结果映射。
    -->
    <resultMap id="userMap" type="com.lile.mybatisExer.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--XML 中的select 标签的id 属性值和定义的接口方法名是一样的。MyBatis
    就是通过这种方式将接口方法和XML 中定义的SQL 语句关联到一起的，如果接口方法没有和
    XML 中的id 属性值相对应，启动程序便会报错-->
    <select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>

    <select id="selectAll" resultType="com.lile.mybatisExer.model.SysUser">
	    select id,
	    	user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
	</select>


    <!--
    映射XML 和接口的命名需要符合如下规则
    1，当只使用XML 而不使用接口的时候， namespace 的值可以设置为任意不重复的名称。
    2，标签的id 属性值在任何时候都不能出现英文句号“．”，并且同一个命名空间下不能出现重复的id 。
    3，因为接口方法是可以重载的，所以接口中可以出现多个同名但参数不同的方法，但是
        XML 中id 的值不能重复，因而接口中的所有同名方法会对应着XML 中的同一个id
        的方法。
    -->

    <!--虽然这个多表关联的查询中涉及了3 个表，但是返回的结果只有sys role 表中的信息，
        所以直接使用SysRole 作为返回值类型即可-->
    <select id="selectRolesByUserId" resultType="com.lile.mybatisExer.model.SysRole">
	    select
			r.id,
			r.role_name roleName,
			/*r.enabled,*/
			r.create_by createBy,
			r.create_time createTime,
			u.user_name as "user.userName",
			u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{userId}

	    /*u.user_name as "user.userName",
			u.user_email as "user.userEmail"
			这里在设置别名的时候，使用的是“ user . 属性名”， user 是SysRole 中刚刚增加的SysUser字段，
			 userName 和userEmail 是SysUser 对象中的属性， 通过这种方式可以直接将值赋给user 字段中的属性。
			*/
    </select>

    <insert id="insert">
		insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=DATE})
	</insert>
<!-- #{createTime, jdbcType=TIMESTAMP}  : 插入的create_time 的格式是 2019-05-08 23:41:51.602(Timestamp)
      #{createTime, jdbcType=Date}  : 插入的create_time 的格式是 2019-05-08(Date)
-->
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		/*自增主键的值设置到user实体的id字段上
		当需要设置多个属性时，使用逗号隔开，这种情况下通常还需要设置keyColumn 属性， 按顺
		序指定数据库的列，这里列的值会和keyProperty 配置的属性一一对应 ，只有一个主键列不需设置keyColumn
		*/
		insert into sys_user(
		user_name, user_password,
		<if test="userEmail != null">
			<if test="userEmail != ''">
				user_email,
			</if>
		</if>
		user_info, head_img, create_time)
		values(
		#{userName}, #{userPassword},
		<if test="userEmail != null">
			<if test="userEmail != ''">
				#{userEmail},
			</if>
		</if>
		#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>

	<insert id="insert3">
		insert into sys_user(
		user_name, user_password, user_email,
		user_info, head_img, create_time)
		values(
		#{userName}, #{userPassword}, #{userEmail},
		#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


	<update id="updateById">
		update sys_user
		set user_name = #{userName},
			user_password = #{userPassword},
			user_email = #{userEmail},
			user_info = #{userInfo},
			head_img = #{headImg, jdbcType=BLOB},
			create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}
	</update>

	<delete id="deleteById">/*参数是id或实体的重载方法都能调用*/
		delete from sys_user where id = #{id}
	</delete>

	<select id="selectRolesByUserIdAndRoleEnabled" resultType="com.lile.mybatisExer.model.SysRole">
	    select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{userId} and r.enabled = #{enabled}
	</select>

    <select id="selectRolesByUserAndRole" resultType="com.lile.mybatisExer.model.SysRole">
	    select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{user.id} and r.enabled = #{role.enabled}
	</select>

    <select id="selectByIdOrUserName" resultType="com.lile.mybatisExer.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                limit 0
            </otherwise>
        </choose>
    </select>

    <!--使用where标签对上面的where 语句 改进， 不再需要在where 后面跟 1=1
       如果该标签包含的元素中有返回值，就插入一个where ；如果where后面的字符串是以AND 和OR 开头的，就将它们剔除。
    -->
    <select id="selectByUser" resultType="com.lile.mybatisExer.model.SysUser">
        <bind name="print" value="@com.lile.mybatisExer.util.StringUtil@print(_parameter)"/>
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="@com.lile.mybatisExer.util.StringUtil@isNotEmpty(userName)">
                and user_name like concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != '' and userEmail != null">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>

    <update id="updateByIdSelective">
        <bind name="print" value="@com.lile.mybatisExer.util.StringUtil@print(_parameter)"/>
        update sys_user
        <set>
            <if test="userName != null and userName != ''">
               user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update> <!--要保证set有返回值，因此id = #{id} 没有 if条件。-->

    <select id="selectByIdList" resultType="com.lile.mybatisExer.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select><!--List<SysUser> selectByIdList(List<Long> idList);  #{id} 是 item 设定的，和接口参数名不一样-->

    <!--使用useGeneratedKeys="true" keyProperty="id" 报错
     Error getting generated key or setting result to parameter object.
      Cause: org.apache.ibatis.binding.BindingException: Parameter 'user' not found. Available parameters are [collection, list]
      需要mybatis 3.3.1 以上-->
    <insert id="insertList" useGeneratedKeys="true"  keyProperty="id" >
        insert into sys_user(
        user_name, user_password,user_email,
        user_info, head_img, create_time)
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName}, #{user.userPassword},#{user.userEmail},
            #{user.userInfo}, #{user.headImg, jdbcType=BLOB}, #{user.createTime, jdbcType=TIMESTAMP})
        </foreach>
    </insert>
    <!--
    批量插入的语法如下。
    INSERT INTO tablename (column- a , [ column-b, ... ] )
    VALUES (’ value-la ’, [ ’ value -lb ’,...]) ,
            ( ’ value-2a ’, [ ’ value- 2b ’,... ]) ,
    -->
    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update><!--这里没有通过@Param 注解指定参数名，因而MyBati s 在内部的上下文中使用了默认值
                _parameter 作为该参数的key-->

    <select id="selectUserAndRoleById" resultType="com.lile.mybatisExer.model.SysUser">
		select
		   	u.id,
		   	u.user_name userName,
		    u.user_password userPassword,
		    u.user_email userEmail,
		    u.user_info userInfo,
		    u.head_img headImg,
		    u.create_time createTime,
			r.id "role.id",
			r.role_name "role.roleName",
			r.enabled "role.enabled",
			r.create_by "role.createBy",
			r.create_time "role.createTime"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{id}
	</select><!--使用列别名自动映射-->

    <select id="selectUserAndRoleById2" resultMap="userRoleMap3">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{id}
	</select><!--使用resultMap映射 , 改成userRoleMap3 ，使用resultMap嵌套association 映射-->

    <resultMap id="userMapBase" type="com.lile.mybatisExer.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userRoleMap2" extends="userMapBase" type="com.lile.mybatisExer.model.SysUser">
        <result property="role.id" column="role_id" />
        <result property="role.roleName" column="role_role_name"/>
        <result property="role.enabled" column="role_enabled" />
        <result property="role.createBy" column="role_create_by"/>
        <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userRoleMap3" extends="userMapBase" type="com.lile.mybatisExer.model.SysUser">
        <association property="role" columnPrefix="role_" javaType="com.lile.mybatisExer.model.SysRole"><!--如果没有引用resultMap，javaType必须写-->
            <result property="id" column="id" />
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled" />
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </association>
    </resultMap>

    <!--引用的resultMap来自于另一个mapper文件-->
    <!--<resultMap id="userRoleMap4" extends="userMapBase" type="com.lile.mybatisExer.model.SysUser">
        <association property="role" columnPrefix="role_" resultMap="com.lile.mybatisExer.mapper.RoleMapper.roleMap"/>
    </resultMap>-->

    <resultMap id="userRoleMapSelect" extends="userMapBase" type="com.lile.mybatisExer.model.SysUser">
        <association property="role"
                     fetchType="lazy"
                     select="com.lile.mybatisExer.mapper.RoleMapper.selectRoleById"
                     column="{id=role_id}"/>
    </resultMap>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
	    where u.id = #{id}
	</select>

    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
	        r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time,
			p.id role_privilege_id,
			p.privilege_name role_privilege_privilege_name,
			p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		inner join sys_role_privilege rp on rp.role_id = r.id
		inner join sys_privilege p on p.id = rp.privilege_id
	</select>

   <!-- <resultMap id="userRoleListMap"   type="com.lile.mybatisExer.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <collection property="roleList" columnPrefix="role_"  javaType="ArrayList"  ofType="com.lile.mybatisExer.model.SysRole">
            <id property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </collection>
    </resultMap>--> <!--这里的javaType是集合的类型。ofType是集合元素的来行，在一般情况下，MyBatis 可以推断 javaType 属性，因此并不需要填写-->


    <resultMap id="userRoleListMap" extends="userMapBase" type="com.lile.mybatisExer.model.SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="com.lile.mybatisExer.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time
		from sys_user u
		where u.id = #{id}
	</select>

	<resultMap id="userRoleListMapSelect" extends="userMapBase" type="com.lile.mybatisExer.model.SysUser">
		<collection property="roleList"
					fetchType="lazy"
					select="com.lile.mybatisExer.mapper.RoleMapper.selectRoleByUserId"
					column="{userId=id}"/>
	</resultMap>

    <!--由于存储过程方式不支持MyBatis 的二级缓存 ，因此
    为了避免缓存配置出错，直接将select 标签的useCache 属性设置为false 。-->
    <select id="selectUserById" statementType="CALLABLE" useCache="false">
	    {call select_user_by_id(
	    	#{id, mode=IN},
	    	#{userName, mode=OUT, jdbcType=VARCHAR},
	    	#{userPassword, mode=OUT, jdbcType=VARCHAR},
	    	#{userEmail, mode=OUT, jdbcType=VARCHAR},
	    	#{userInfo, mode=OUT, jdbcType=VARCHAR},
	    	#{headImg, mode=OUT, jdbcType=BLOB, javaType=_byte[]},
	    	#{createTime, mode=OUT, jdbcType=TIMESTAMP}
	    )}
	</select>

    <!--因为调用存储过程返回查询结果集， select 标签需设置resultMap，将结果映射到List<SysUser>
	该方法还通过 total 出参得到了查询的总数-->
    <select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMapBase">
	    {call select_user_page(
	    	#{userName, mode=IN},
	    	#{offset, mode=IN},
	    	#{limit, mode=IN},
	    	#{total, mode=OUT, jdbcType=BIGINT}
	    )}
	</select>

    <insert id="insertUserAndRoles" statementType="CALLABLE">
	    {call insert_user_and_roles(
	    	#{user.id, mode=OUT, jdbcType=BIGINT},
	    	#{user.userName, mode=IN},
	    	#{user.userPassword, mode=IN},
	    	#{user.userEmail, mode=IN},
	    	#{user.userInfo, mode=IN},
	    	#{user.headImg, mode=IN, jdbcType=BLOB},
	    	#{user.createTime, mode=OUT, jdbcType=TIMESTAMP},
	    	#{roleIds, mode=IN}
	    )}
	</insert>

    <delete id="deleteUserById" statementType="CALLABLE">
	    {call delete_user_by_id(#{id, mode=IN})}
	</delete>
</mapper>


