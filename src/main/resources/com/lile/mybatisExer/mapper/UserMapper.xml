<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lile.mybatisExer.mapper.UserMapper">

    <!--需要注意的是<mapper>根标签的 namespace属性。当Mapper接口和XML文件关联的时候,
    命名空间 namespace的值就需要配置成接口的全限定名称,例如 UserMapper接口对应的com.lile.mybatisExer.mapper.UserMapper
    , MyBatis内部就是通过这个值将接口和XML关联起来的-->

    <!--resultMap ：用于设置返回值的类型和映射关系。
    type ：必填，用于配置查询列所映射到的Java 对象类型。
    extends :选填，可以配置当前的resultMap 继承自其他的re sultMap ，属性值为继承resultMap 的id 。
    autoMapping ：选填，可选值为true 或false ，用于配置是否启用非映射字段（没有在resultMap 中配置的字段〉的自动映射功能， 该配置可以覆盖全局的
                    autoMappingBehavior 配置。

     resultMap 包含的所有标签如下。
        id ： 一个id 结果，标记结果作为id （唯一值），可以帮助提高整体性能。id 代表的是主键（或唯一值）的字段（可以有多个）
        result ： 注入到Java 对象属性的普通结果。
        association ： 一个复杂的类型关联，许多结果将包成这种类型。
        collection ： 复杂类型的集合。
        discriminator ：根据结果值来决定使用哪个结果映射。
        case ： 基于某些值的结果映射。
    -->
    <resultMap id="userMap" type="com.lile.mybatisExer.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--XML 中的select 标签的id 属性值和定义的接口方法名是一样的。MyBatis
    就是通过这种方式将接口方法和XML 中定义的SQL 语句关联到一起的，如果接口方法没有和
    XML 中的id 属性值相对应，启动程序便会报错-->
    <select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>

    <select id="selectAll" resultType="com.lile.mybatisExer.model.SysUser">
	    select id,
	    	user_name userName,
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
	</select>


    <!--
    映射XML 和接口的命名需要符合如下规则
    1，当只使用XML 而不使用接口的时候， namespace 的值可以设置为任意不重复的名称。
    2，标签的id 属性值在任何时候都不能出现英文句号“．”，并且同一个命名空间下不能出现重复的id 。
    3，因为接口方法是可以重载的，所以接口中可以出现多个同名但参数不同的方法，但是
        XML 中id 的值不能重复，因而接口中的所有同名方法会对应着XML 中的同一个id
        的方法。
    -->

    <!--虽然这个多表关联的查询中涉及了3 个表，但是返回的结果只有sys role 表中的信息，
        所以直接使用SysRole 作为返回值类型即可-->
    <select id="selectRolesByUserId" resultType="com.lile.mybatisExer.model.SysRole">
	    select
			r.id,
			r.role_name roleName,
			/*r.enabled,*/
			r.create_by createBy,
			r.create_time createTime,
			u.user_name as "user.userName",
			u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{userId}

	    /*u.user_name as "user.userName",
			u.user_email as "user.userEmail"
			这里在设置别名的时候，使用的是“ user . 属性名”， user 是SysRole 中刚刚增加的SysUser字段，
			 userName 和userEmail 是SysUser 对象中的属性， 通过这种方式可以直接将值赋给user 字段中的属性。
			*/
    </select>

    <insert id="insert">
		insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=DATE})
	</insert>
<!-- #{createTime, jdbcType=TIMESTAMP}  : 插入的create_time 的格式是 2019-05-08 23:41:51.602(Timestamp)
      #{createTime, jdbcType=Date}  : 插入的create_time 的格式是 2019-05-08(Date)
-->
</mapper>


